Timer unit: 1e-09 s

Total time: 36.4588 s
File: /Users/kuldeepsingh/Work/github/1brc/py_1brc_2.py
Function: main at line 55

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    55                                           @line_profiler.profile
    56                                           def main() -> None:
    57         1      15000.0  15000.0      0.0      num_processes = os.cpu_count() or 1
    58                                               # file_path = "measurements.txt"
    59                                               # total_lines = count_lines(file_path)
    60         1       4000.0   4000.0      0.0      chunk_size = 100000000 // num_processes
    61                                               #chunk_size = 100_000_000  # 1 million rows per chunk
    62         1   61656000.0    6e+07      0.2      manager = multiprocessing.Manager()
    63         1       1000.0   1000.0      0.0      processes: List[multiprocessing.Process] = []
    64         1          0.0      0.0      0.0      ret_dicts : List[multiprocessing.managers.DictProxy] = []
    65                                           
    66        14      36000.0   2571.4      0.0      for i in range(0, 100000000, chunk_size):
    67        13   21630000.0    2e+06      0.1          return_dict = manager.dict()
    68        13      33000.0   2538.5      0.0          ret_dicts.append(return_dict)
    69        13     329000.0  25307.7      0.0          p = multiprocessing.Process(target=process_chunk, args=(i, chunk_size, return_dict))
    70        13       6000.0    461.5      0.0          processes.append(p)
    71        13   12904000.0 992615.4      0.0          p.start()
    72                                           
    73        14       4000.0    285.7      0.0      for p in processes:
    74        13        4e+10    3e+09     99.7          p.join()
    75                                           
    76         1       9000.0   9000.0      0.0      shared_results = dict()
    77        14      26000.0   1857.1      0.0      for return_dict in ret_dicts:
    78      5382    3973000.0    738.2      0.0          for station, data in return_dict.items():
    79      5369     742000.0    138.2      0.0              if station in shared_results:
    80      4956     630000.0    127.1      0.0                  _result = shared_results[station]
    81      4956     698000.0    140.8      0.0                  if data[0] < _result[0]:
    82                                                               _result[0] = data[0]
    83      4956     609000.0    122.9      0.0                  if data[1] > _result[1]:
    84                                                               _result[1] = data[1]
    85      4956     836000.0    168.7      0.0                  _result[2] += data[2]
    86      4956     858000.0    173.1      0.0                  _result[3] += data[3]
    87                                                       else:
    88       413      47000.0    113.8      0.0                  shared_results[station] = data
    89                                           
    90                                               # sorted_stations: Set[str] = sorted(shared_results.keys())
    91                                               # for station in sorted_stations:
    92                                               #     min_temp, max_temp, total_temp,count = shared_results[station]
    93                                               #     mean_temp = total_temp / count
    94                                               #     print(f"{station};{min_temp:.1f}/{mean_temp:.1f}/{max_temp:.1f}")
    95                                           
    96         1       8000.0   8000.0      0.0      print("{", end="")
    97       414     140000.0    338.2      0.0      for location, measurements in sorted(shared_results.items()):
    98       826     186000.0    225.2      0.0          print(
    99       413     353000.0    854.7      0.0              f"{location.decode('utf8')}={measurements[0]:.1f}/{(measurements[2] / measurements[3]) if measurements[3] !=0 else 0:.1f}/{measurements[1]:.1f}",
   100       413      36000.0     87.2      0.0              end=", ",
   101                                                   )
   102         1     221000.0 221000.0      0.0      print("\b\b} ")

 36.46 seconds - /Users/kuldeepsingh/Work/github/1brc/py_1brc_2.py:55 - main
