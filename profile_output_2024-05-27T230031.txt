Timer unit: 1e-09 s

Total time: 20.4609 s
File: /Users/kuldeepsingh/Work/github/1brc/py_1brc_2.py
Function: process_chunk at line 9

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     9                                           @line_profiler.profile
    10                                           def process_chunk(chunk_start: int, chunk_size: int, return_dict: multiprocessing.managers.DictProxy) -> None:
    11         2      27000.0  13500.0      0.0      with open("measurements_100mil.txt", "r+b") as file:
    12         1       9000.0   9000.0      0.0          mm = mmap.mmap(file.fileno(), 0, access=mmap.ACCESS_READ)
    13         1       1000.0   1000.0      0.0          chunk_end = chunk_start + chunk_size
    14                                           
    15                                                   #station_data: DefaultDict[str, List[float]] = defaultdict(lambda: [200.0, -200.0, 0.0, 0])
    16                                           
    17         1          0.0      0.0      0.0          result = dict()
    18                                           
    19   8333334 2759665000.0    331.2     13.5          for i, line in enumerate(iter(mm.readline, b""), chunk_start):
    20   8333334 1514565000.0    181.7      7.4              if i >= chunk_end:
    21         1       6000.0   6000.0      0.0                  break
    22                                           
    23   8333333 2730558000.0    327.7     13.3              location, temp_str = line.split(b";")
    24   8333333 1893091000.0    227.2      9.3              measurement = float(temp_str)
    25                                           
    26   8333333 1913931000.0    229.7      9.4              if location not in result:
    27       413      61000.0    147.7      0.0                  result[location] = [
    28       413      37000.0     89.6      0.0                      measurement,
    29       413      30000.0     72.6      0.0                      measurement,
    30       413      34000.0     82.3      0.0                      measurement,
    31       413      32000.0     77.5      0.0                      1,
    32                                                           ]  # min, max, sum, count
    33                                                       else:
    34   8332920 1644286000.0    197.3      8.0                  _result = result[location]
    35   8332920 1663280000.0    199.6      8.1                  if measurement < _result[0]:
    36      3912     613000.0    156.7      0.0                      _result[0] = measurement
    37   8332920 1799080000.0    215.9      8.8                  if measurement > _result[1]:
    38      3906     624000.0    159.8      0.0                      _result[1] = measurement
    39   8332920 2356696000.0    282.8     11.5                  _result[2] += measurement
    40   8332920 2174973000.0    261.0     10.6                  _result[3] += 1
    41                                           
    42                                           
    43       414     114000.0    275.4      0.0          for station, data in result.items():
    44       413    9143000.0  22138.0      0.0              return_dict[station] = data
    45                                                       # if station in return_dict:
    46                                                       #     existing_data = return_dict[station]
    47                                                       #     return_dict[station] = (
    48                                                       #         min(existing_data[0], data[0]),
    49                                                       #         (existing_data[2] + data[2]) / (existing_data[3] + data[3]),
    50                                                       #         max(existing_data[1], data[1])
    51                                                       #     )
    52                                                       # else:
    53                                                       #     return_dict[station] = (data[0], data[2] / data[3], data[1])

 20.46 seconds - /Users/kuldeepsingh/Work/github/1brc/py_1brc_2.py:9 - process_chunk
