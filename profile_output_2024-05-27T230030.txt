Timer unit: 1e-09 s

Total time: 20.0507 s
File: /Users/kuldeepsingh/Work/github/1brc/py_1brc_2.py
Function: process_chunk at line 9

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     9                                           @line_profiler.profile
    10                                           def process_chunk(chunk_start: int, chunk_size: int, return_dict: multiprocessing.managers.DictProxy) -> None:
    11         2      54000.0  27000.0      0.0      with open("measurements_100mil.txt", "r+b") as file:
    12         1      27000.0  27000.0      0.0          mm = mmap.mmap(file.fileno(), 0, access=mmap.ACCESS_READ)
    13         1          0.0      0.0      0.0          chunk_end = chunk_start + chunk_size
    14                                           
    15                                                   #station_data: DefaultDict[str, List[float]] = defaultdict(lambda: [200.0, -200.0, 0.0, 0])
    16                                           
    17         1          0.0      0.0      0.0          result = dict()
    18                                           
    19   8333334 2669386000.0    320.3     13.3          for i, line in enumerate(iter(mm.readline, b""), chunk_start):
    20   8333334 1523841000.0    182.9      7.6              if i >= chunk_end:
    21         1       1000.0   1000.0      0.0                  break
    22                                           
    23   8333333 2637871000.0    316.5     13.2              location, temp_str = line.split(b";")
    24   8333333 1827073000.0    219.2      9.1              measurement = float(temp_str)
    25                                           
    26   8333333 1895739000.0    227.5      9.5              if location not in result:
    27       413     152000.0    368.0      0.0                  result[location] = [
    28       413      77000.0    186.4      0.0                      measurement,
    29       413     104000.0    251.8      0.0                      measurement,
    30       413      70000.0    169.5      0.0                      measurement,
    31       413      57000.0    138.0      0.0                      1,
    32                                                           ]  # min, max, sum, count
    33                                                       else:
    34   8332920 1608597000.0    193.0      8.0                  _result = result[location]
    35   8332920 1555660000.0    186.7      7.8                  if measurement < _result[0]:
    36      3912     602000.0    153.9      0.0                      _result[0] = measurement
    37   8332920 1775166000.0    213.0      8.9                  if measurement > _result[1]:
    38      3906     573000.0    146.7      0.0                      _result[1] = measurement
    39   8332920 2380067000.0    285.6     11.9                  _result[2] += measurement
    40   8332920 2142212000.0    257.1     10.7                  _result[3] += 1
    41                                           
    42                                           
    43       414     328000.0    792.3      0.0          for station, data in result.items():
    44       413   33002000.0  79908.0      0.2              return_dict[station] = data
    45                                                       # if station in return_dict:
    46                                                       #     existing_data = return_dict[station]
    47                                                       #     return_dict[station] = (
    48                                                       #         min(existing_data[0], data[0]),
    49                                                       #         (existing_data[2] + data[2]) / (existing_data[3] + data[3]),
    50                                                       #         max(existing_data[1], data[1])
    51                                                       #     )
    52                                                       # else:
    53                                                       #     return_dict[station] = (data[0], data[2] / data[3], data[1])

 20.05 seconds - /Users/kuldeepsingh/Work/github/1brc/py_1brc_2.py:9 - process_chunk
